import sys

import dynamic_reconfigure.parameter_generator_catkin as parameter_generator

gen = parameter_generator.ParameterGenerator()

project = gen.add_group("project")
tracker = gen.add_group("tracker")
ude = gen.add_group("ude")
attitude = gen.add_group("Attitude_Tracking")
position = tracker.add_group("Position_Tracking")
velocity = tracker.add_group("Velocity_Tracking")

project.add(
    "enable_inner_controller",
    parameter_generator.bool_t,
    0,
    "Toggles whether inner controller is enabled",
    default=False,
)

ude.add(
    "is_velocity_based",
    parameter_generator.bool_t,
    0,
    "Toggles whether the UDE is velocity/acceleration based",
)
ude.add(
    "gain",
    parameter_generator.double_t,
    0,
    description="Gain for UDE",
    default=4.0,
    min=0.0,
    max=10.0,
)
ude.add(
    "height_threshold",
    parameter_generator.double_t,
    0,
    description="Height threshold for UDE activation",
    default=0.2,
    min=0.0,
    max=20.0,
)

position.add(
    "apply_pos_err_saturation",
    parameter_generator.bool_t,
    0,
    "Toggle whether position error saturation is active",
    default=True,
)
for char, default_pkp in zip("xyz", [0.75, 0.75, 1.0]):
    position.add(
        "pos_p_{}".format(char),
        parameter_generator.double_t,
        0,
        description="P-gain for {}-position control".format(char),
        default=default_pkp,
        min=0.1,
        max=10.0,
    )

velocity.add(
    "apply_vel_err_saturation",
    parameter_generator.bool_t,
    0,
    "Toggle whether velocity error saturation is active",
    default=False,
)

for char, default_vkp in zip("xyz", [5.0, 5.0, 6.0]):
    velocity.add(
        "vel_p_{}".format(char),
        parameter_generator.double_t,
        0,
        description="P-gain for {}-velocity control".format(char),
        default=default_vkp,
        min=0.1,
        max=10.0,
    )

attitude.add(
    "use_sqrt_controller",
    parameter_generator.bool_t,
    0,
    description="Use sqrt controller",
    default=True,
)
attitude.add(
    "enable_rate_feedforward",
    parameter_generator.bool_t,
    0,
    description="Enable rate feedforward",
    default=True,
)

attitude.add(
    "input_tc",
    parameter_generator.double_t,
    0,
    description="Input time constant",
    min=0.1,
    max=5,
    default=1,
)

for axname, default_rpykp in zip(("roll", "pitch", "yaw"), [6.5, 6.5, 2.8]):
    attitude.add(
        "{}_p".format(axname),
        parameter_generator.double_t,
        0,
        description="P-gain for {} control".format(axname),
        default=default_rpykp,
        min=0.1,
        max=10.0,
    )

sys.exit(gen.generate("tracking_control", "tracking_control", "TrackingControl"))
